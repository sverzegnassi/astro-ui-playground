---
import type { HTMLAttributes } from "astro/types";
import Button from "@components/Button.astro";
import NavigationBarLink from "./NavigationBarLink.astro";
import NavigationBarSubmenuHeader from "./NavigationBarSubmenuHeader.astro";
import NavigationBarMenuButton from "./NavigationBarMenuButton.astro";
import NavigationBarMenu from "./NavigationBarMenu.astro";
import NavigationBarSubmenuButton from "./NavigationBarSubmenuButton.astro";

type Props = HTMLAttributes<"header">;

const { class: className, ...attrs } = Astro.props;
---

<header
  {...attrs}
  class:list={["navbar", "relative", className]}
  x-data={`
    {
      showMenu: false,
      isSmallScreen: () => (window.innerWidth > 0)
        ? (window.innerWidth < 768)
        : (screen.width < 768)
    }
  `}
  x-effect="$dispatch('showmenuchanged', { newValue: showMenu });"
  x-bind:data-is-open="showMenu"
>
  <nav>
    <a href="/" class="logo">
      <span class="text-lg font-bold tracking-tighter text-neutral-500">Logo</span>
    </a>
    <NavigationBarMenuButton
      @click="showMenu = !showMenu"
      :aria-expanded="showMenu"
      :aria-label="! showMenu ? 'Show Menu' : 'Hide Menu'"
    />
    <slot />
  </nav>
</header>

<style is:global>
  @media (width < 768px) {   
    body:has(.navbar[data-is-open]) {
      & > *:not(.navbar) {
        @apply h-0 overflow-hidden;
      }
    }
  }
</style>

<style>
  .navbar {
    @apply sticky top-0 z-50;
    @apply w-full h-16;
    @apply bg-neutral-100;
    @apply border-b border-neutral-300;
    @apply px-4 md:px-8;

    & > nav {
      @apply w-full h-full;

      @apply grid md:flex items-center gap-4;
      @apply justify-between;
      @apply grid-cols-2;
      @apply grid-rows-[4rem_1fr_1fr];

      & > .logo {
        @apply col-span-1;
      }
    }
  }
</style>
