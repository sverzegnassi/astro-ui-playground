---
import NavigationBarSubmenuButton from './NavigationBarSubmenuButton.astro';
import NavigationBarSubmenuHeader from './NavigationBarSubmenuHeader.astro';

interface Props {
  isSubMenu?: boolean;
  title?: string,
}

const { title, isSubMenu = false } = Astro.props

---

<!-- TODO: Should I use aria-haspopup? expands? controls? Check how Radix UI does -->

{ !isSubMenu && (
  <ul class="menu" :class="showMenu && 'menuVisible'">
    <slot />
  </ul>
)}

{ isSubMenu && (
  <li x-data="{ showSubmenu: false, closeTimer: undefined }" @showmenuchanged.window="if ($event.detail.newValue == false) showSubmenu = false;" x-cloak>
    <NavigationBarSubmenuButton
      @click="showSubmenu = true"
      @mouseover="if (!isSmallScreen()) showSubmenu = true"
      @mouseleave="if (!isSmallScreen()) { closeTimer = setTimeout(() => showSubmenu = false, 166) }"
    >
      {title}
    </NavigationBarSubmenuButton>
    <ul
      class="submenu"
      @mouseover="if (!isSmallScreen()) clearTimeout(closeTimer); showSubmenu = true"
      @mouseleave="if (!isSmallScreen()) { closeTimer = setTimeout(() => showSubmenu = false, 166) }"
      x-show="showSubmenu"
      x-cloak
    >
      <NavigationBarSubmenuHeader @click="showSubmenu = false">{title}</NavigationBarSubmenuHeader>
      <slot />
    </ul>
  </li>
)}

<style is:global>
  .submenu {
    & li {
      @apply flex-shrink-0;
    }
  }
</style>


<style>
  [x-cloak] {
    display: none !important;
  }

  .menu {
    @apply hidden md:inline-flex flex-col md:flex-row gap-x-4 gap-y-2;
    @apply w-full h-auto md:h-max md:w-max;
    @apply col-span-2 md:col-span-1;
    @apply md:items-center;
    @apply pb-4 md:pb-0;

    /* A little tribute to earlier Ubuntu for Phone UI design */
    &::before {
      content: "";
      @apply md:hidden;
      @apply absolute top-16;
      @apply w-dvw -mx-4;
      @apply border-t-8 border-neutral-300;
      @apply shadow-inner;
    }

    /*
      TODO: Either use & :global(.btn), or don't use <Button>

        Considerations: 
          - One idea I've been playing around was that "Buttons should look like buttons, links should look like links."
          - Menu and MenuItem follow this principle. MenuItem provides an 'as' prop. If it's a link, it looks like a
            menu entry. If it's a <button>, it looks like a button.
          - One gray area is Call-to-actions and navbar, which normally presents button-shaped anchors.
            <Button as="anchor" /> is meant to cover this specific scenario, but I'm not completely sold on using it
            in <NavigationBar> where <NavigationBarLink> is available.
          - Having a <NavigationBarButton>, wrapper for <Button>, seems desirable - although redudant.
          - Another issue is that now there are <Header> and <NavigationBar>. One is designed around flex, one around grid.
            <NavigationBar> is a pattern component, not a primitive component - and supports more complex scenarios.
            At the very least, <NavigationBar> should subclass <Header>, and <Header> should be - at least - able
            to plan on two rows - i.e. use grid instead of flex. 
    */
    & :global(.btn:not(.submenuHeaderBtn)) {
      @apply w-full md:w-fit;
    }
  }

  .menuVisible {
    @media (width < 768px) {
      @apply flex;
      @apply bg-neutral-100;
    }
  }

  .submenu {
    /*  !!!
        Make sure the nearest positioned ancestor is <NavigationBar> root element ( i.e. <header> ).
    */
    @apply fixed md:absolute;
    @apply top-16 md:top-[calc(100%_+_1px)] left-0;
    @apply w-full h-[calc(100dvh-4rem)] md:h-max;
    @apply overflow-y-auto overflow-x-hidden;

    @apply bg-neutral-100;
    @apply md:shadow-xl;
    @apply p-4;
    @apply gap-x-4 gap-y-2;
    
    @apply flex flex-col md:grid md:grid-flow-col-dense;
    @apply md:grid-rows-12 md:grid-cols-2 lg:grid-rows-5 lg:auto-cols-fr;
    @apply md:px-4 xl:px-[15%] 2xl:px-[25%];
  }
</style>

